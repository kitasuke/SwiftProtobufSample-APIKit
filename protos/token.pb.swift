/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: token.proto
 *
 */

import Foundation
import SwiftProtobuf


struct Token: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Token"}
  public var protoMessageName: String {return "Token"}
  public var protoPackageName: String {return ""}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "accessToken", swift: "accessToken"),
  ]


  var accessToken: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &accessToken)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if accessToken != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: accessToken, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Token) -> Bool {
    if accessToken != other.accessToken {return false}
    return true
  }
}

///   GET - Response
struct GetTokenResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "GetTokenResponse"}
  public var protoMessageName: String {return "GetTokenResponse"}
  public var protoPackageName: String {return ""}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "token", swift: "token"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = GetTokenResponse
    var _token: Token? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Token.self, value: &_token)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _token {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _token != other._token {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._token = _token
      return clone
    }
  }

  private var _storage = _StorageClass()


  var token: Token {
    get {return _storage._token ?? Token()}
    set {_uniqueStorage()._token = newValue}
  }
  public var hasToken: Bool {
    return _storage._token != nil
  }
  public mutating func clearToken() {
    return _storage._token = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: GetTokenResponse) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   POST - Request
struct PostTokenRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "PostTokenRequest"}
  public var protoMessageName: String {return "PostTokenRequest"}
  public var protoPackageName: String {return ""}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "accessToken", swift: "accessToken"),
  ]


  var accessToken: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &accessToken)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if accessToken != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: accessToken, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: PostTokenRequest) -> Bool {
    if accessToken != other.accessToken {return false}
    return true
  }
}

///   POST - Response
struct PostTokenResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "PostTokenResponse"}
  public var protoMessageName: String {return "PostTokenResponse"}
  public var protoPackageName: String {return ""}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "token", swift: "token"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = PostTokenResponse
    var _token: Token? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Token.self, value: &_token)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _token {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _token != other._token {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._token = _token
      return clone
    }
  }

  private var _storage = _StorageClass()


  var token: Token {
    get {return _storage._token ?? Token()}
    set {_uniqueStorage()._token = newValue}
  }
  public var hasToken: Bool {
    return _storage._token != nil
  }
  public mutating func clearToken() {
    return _storage._token = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: PostTokenResponse) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
