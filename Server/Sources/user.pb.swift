/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: user.proto
 *
 */

import Foundation
import SwiftProtobuf


struct User: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "User"}
  public var protoMessageName: String {return "User"}
  public var protoPackageName: String {return ""}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "type", swift: "type"),
    3: .same(proto: "name", swift: "name"),
    4: .same(proto: "introduction", swift: "introduction"),
    5: .same(proto: "photoUrl", swift: "photoURL"),
  ]


  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case speaker // = 0
    case participant // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .speaker
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .speaker
      case 1: self = .participant
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(name: String) {
      switch name {
      case "speaker": self = .speaker
      case "participant": self = .participant
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "Speaker": self = .speaker
      case "Participant": self = .participant
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "Speaker": self = .speaker
      case "Participant": self = .participant
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .speaker: return 0
        case .participant: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .speaker: return "\"Speaker\""
        case .participant: return "\"Participant\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .speaker: return ".speaker"
        case .participant: return ".participant"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  var id: Int32 = 0

  var type: User.TypeEnum = User.TypeEnum.speaker

  var name: String = ""

  var introduction: String = ""

  var photoURL: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: User.TypeEnum.self, value: &type)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &name)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &introduction)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &photoURL)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if id != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: id, protoFieldNumber: 1)
    }
    if type != User.TypeEnum.speaker {
      try visitor.visitSingularField(fieldType: User.TypeEnum.self, value: type, protoFieldNumber: 2)
    }
    if name != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: name, protoFieldNumber: 3)
    }
    if introduction != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: introduction, protoFieldNumber: 4)
    }
    if photoURL != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: photoURL, protoFieldNumber: 5)
    }
  }

  public func _protoc_generated_isEqualTo(other: User) -> Bool {
    if id != other.id {return false}
    if type != other.type {return false}
    if name != other.name {return false}
    if introduction != other.introduction {return false}
    if photoURL != other.photoURL {return false}
    return true
  }
}
