/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: talk.proto
 *
 */

import Foundation
import SwiftProtobuf


struct Talk: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Talk"}
  public var protoMessageName: String {return "Talk"}
  public var protoPackageName: String {return ""}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "title", swift: "title"),
    3: .same(proto: "desc", swift: "desc"),
    4: .same(proto: "speaker", swift: "speaker"),
    5: .same(proto: "tags", swift: "tags"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Talk
    var _id: Int32 = 0
    var _title: String = ""
    var _desc: String = ""
    var _speaker: User? = nil
    var _tags: [String] = []

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_id)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_title)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_desc)
      case 4: try setter.decodeSingularMessageField(fieldType: User.self, value: &_speaker)
      case 5: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_tags)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if _id != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _id, protoFieldNumber: 1)
      }
      if _title != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _title, protoFieldNumber: 2)
      }
      if _desc != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _desc, protoFieldNumber: 3)
      }
      if let v = _speaker {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 4)
      }
      if !_tags.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _tags, protoFieldNumber: 5)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _id != other._id {return false}
      if _title != other._title {return false}
      if _desc != other._desc {return false}
      if _speaker != other._speaker {return false}
      if _tags != other._tags {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._id = _id
      clone._title = _title
      clone._desc = _desc
      clone._speaker = _speaker
      clone._tags = _tags
      return clone
    }
  }

  private var _storage = _StorageClass()


  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var desc: String {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  var speaker: User {
    get {return _storage._speaker ?? User()}
    set {_uniqueStorage()._speaker = newValue}
  }
  public var hasSpeaker: Bool {
    return _storage._speaker != nil
  }
  public mutating func clearSpeaker() {
    return _storage._speaker = nil
  }

  var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Talk) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct TalkResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "TalkResponse"}
  public var protoMessageName: String {return "TalkResponse"}
  public var protoPackageName: String {return ""}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "talks", swift: "talks"),
  ]


  var talks: [Talk] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Talk.self, value: &talks)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !talks.isEmpty {
      try visitor.visitRepeatedMessageField(value: talks, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: TalkResponse) -> Bool {
    if talks != other.talks {return false}
    return true
  }
}

struct LikeRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "LikeRequest"}
  public var protoMessageName: String {return "LikeRequest"}
  public var protoPackageName: String {return ""}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
  ]


  var id: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &id)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if id != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: id, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: LikeRequest) -> Bool {
    if id != other.id {return false}
    return true
  }
}

struct LikeResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "LikeResponse"}
  public var protoMessageName: String {return "LikeResponse"}
  public var protoPackageName: String {return ""}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "result", swift: "result"),
  ]


  var result: Bool = false

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &result)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if result != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: result, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: LikeResponse) -> Bool {
    if result != other.result {return false}
    return true
  }
}
